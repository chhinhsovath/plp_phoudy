import { Repository } from 'typeorm';
import { Question, QuestionUsage } from '../../entities/question.entity';
import { QuestionType } from '../../entities/question-type.entity';
import { QuestionExplanation } from '../../entities/question-explanation.entity';
import { LessonActivity } from '../../entities/lesson-activity.entity';
import { CreateQuestionDto } from './dto/create-question.dto';
import { UpdateQuestionDto } from './dto/update-question.dto';
import { QuestionWithAnswersDto } from './dto/question-with-answers.dto';
import { Status } from '../../entities/enums/status.enum';
export declare class QuestionsService {
    private questionRepository;
    private questionTypeRepository;
    private questionExplanationRepository;
    private lessonActivityRepository;
    constructor(questionRepository: Repository<Question>, questionTypeRepository: Repository<QuestionType>, questionExplanationRepository: Repository<QuestionExplanation>, lessonActivityRepository: Repository<LessonActivity>);
    findAll(): Promise<any[]>;
    findAllByOrderByCreatedAtDesc(): Promise<any[]>;
    findAllByOrderByQuestionOrderAsc(): Promise<any[]>;
    findOne(id: number): Promise<any>;
    findOneWithAnswers(id: number): Promise<QuestionWithAnswersDto>;
    findByQuestionTypeId(questionTypeId: number): Promise<any[]>;
    findByDifficultyLevel(level: string): Promise<any[]>;
    findByLessonActivityId(lessonActivitiesId: number): Promise<any[]>;
    findByLessonActivityIdAndUsageType(lessonActivitiesId: number, usageType: QuestionUsage): Promise<any[]>;
    findByUsageType(usageType: QuestionUsage): Promise<any[]>;
    findByStatus(status: Status): Promise<any[]>;
    findByLessonActivityIdAndStatus(lessonActivitiesId: number, status: Status): Promise<any[]>;
    create(createQuestionDto: CreateQuestionDto): Promise<any>;
    update(id: number, updateQuestionDto: UpdateQuestionDto): Promise<any>;
    updateStatus(id: number, status: Status): Promise<any>;
    remove(id: number): Promise<void>;
    removeAll(ids: number[]): Promise<void>;
    updateQuestionOrder(id: number, order: number): Promise<any>;
    updateQuestionOrders(questionOrders: Map<number, number>): Promise<void>;
    fixSequenceIssue(): Promise<void>;
    findExplanation(questionId: number): Promise<any>;
    createOrUpdateExplanation(questionId: number, explanationText: string): Promise<any>;
    removeExplanation(questionId: number): Promise<void>;
    private formatQuestionResponse;
}
